import numpy as np

from openmethane_prior.lib.grid.create_grid import create_grid_from_mcip, create_grid_from_domain


def test_create_grid_from_domain(config, input_files):
    test_domain = config.inventory_dataset()
    test_grid = create_grid_from_domain(test_domain)

    assert test_grid.dimensions == (test_domain.sizes["x"], test_domain.sizes["y"])
    assert test_grid.shape == (test_domain.sizes["y"], test_domain.sizes["x"])
    assert test_grid.origin_xy == (-2270000.0, -2165629.25)
    assert test_grid.cell_size == (10000.0, 10000.0)

    # Melbourne, Australia
    np.testing.assert_allclose(test_grid.lonlat_to_xy(144.9631, -37.8136), (1014554.3519839852, -1173329.3201172445))
    assert test_grid.lonlat_to_cell_index(144.9631, -37.8136) == (328, 99, True)

    assert test_grid.origin_xy == (test_domain["x_bounds"][0, 0], test_domain["y_bounds"][0, 0])
    assert test_grid.llc_center_xy == (test_domain["x"][0], test_domain["y"][0])
    assert test_grid.cell_area == test_domain.XCELL * test_domain.YCELL


def test_create_grid_from_domain_coordinates(config, input_files):
    test_domain = config.inventory_dataset()
    test_grid = create_grid_from_domain(test_domain)

    # projection center coords for all cells in the domain
    x_center_coords = test_grid.cell_coords_x()
    y_center_coords = test_grid.cell_coords_y()

    # choose a range of 10x10 coordinates within the domain to spot test, including upper and lower bounds
    x_test_coords = [0, *np.random.randint(test_grid.dimensions[0], size=8), test_grid.dimensions[0] - 1]
    y_test_coords = [0, *np.random.randint(test_grid.dimensions[1], size=8), test_grid.dimensions[1] - 1]

    # note: the coordinates generated by pyproj have been observed to drift by
    # up to **5 meters** from the coordinates generated by MCIP, due to the
    # differences between MCIPs projection algorithm and ours.
    drift_tolerance = 5 # meters

    for y in y_test_coords:
        for x in x_test_coords:
            # compare the coordinates generated by our Grid class with the
            # lon/lat coords stored in the input domain file which was
            # generated by MCIP using the same grid parameters.
            expected_coords = (float(x_center_coords[x]), float(y_center_coords[y]))
            input_coords = (float(test_domain["lon"][y, x].values), float(test_domain["lat"][y, x].values))
            projected_coords = test_grid.lonlat_to_xy(*input_coords)

            np.testing.assert_allclose(projected_coords, expected_coords, atol=drift_tolerance)


def test_create_grid_from_mcip():
    # aust10km projection details
    test_grid = create_grid_from_mcip(
        TRUELAT1=-15.0,
        TRUELAT2=-40.0,
        MOAD_CEN_LAT=-27.643997,
        STAND_LON=133.302001953125,
        COLS=454,
        ROWS=430,
        XCENT=133.302001953125,
        YCENT=-27.5,
        XORIG=-2270000.0,
        YORIG=-2165629.25,
        XCELL=10000.0,
        YCELL=10000.0,
    )

    assert test_grid.dimensions == (454, 430)
    assert test_grid.shape == (430, 454)
    assert test_grid.origin_xy == (-2270000.0, -2165629.25)
    assert test_grid.cell_size == (10000.0, 10000.0)

    # Melbourne, Australia
    np.testing.assert_allclose(test_grid.lonlat_to_xy(144.9631, -37.8136), (1014554.3519839852, -1173329.3201172445))
    assert test_grid.lonlat_to_cell_index(144.9631, -37.8136) == (328, 99, True)
